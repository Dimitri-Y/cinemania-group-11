{"mappings":"AAAA,MCMMA,EAAoBC,SAASC,cAAc,wBA6FjDC,eAAeC,EAAcC,GAC3B,MACMC,QAAiBC,MAAM,yGACvBC,QAAaF,EAASG,OAO5B,OALmBJ,EAASK,KAAIC,GAChBH,EAAKI,OAAOC,MAAKC,GAASA,EAAMC,KAAOJ,IACxCK,OAGGC,KAAK,K,EAxFzBd,iBACE,IACE,MACMe,SAfDX,MAAM,8GAAwDY,MACnEC,IACE,IAAKA,EAAUC,GACb,MAAM,IAAIC,MAAMF,EAAUG,QAE5B,OAAOH,EAAUX,MAAM,KAUGe,QAE5B,GAAIN,EAAeO,QAAU,EAAG,CAC9B,MAAMC,EACJR,EAAeS,KAAKC,MAAMD,KAAKE,SAAWX,EAAeO,SACrDK,QAAmB1B,EAAcsB,EAAYK,WAC7CC,QAYZ7B,gBAA4BY,GAC1BA,EAAEkB,YACFA,EAAWC,cACXA,EAAaC,MACbA,EAAKC,SACLA,EAAQC,WACRA,EAAUC,aACVA,EAAYC,WACZA,EAAUC,aACVA,EAAYT,UACZA,IAEA,MAAMD,QAAmB1B,EAAc2B,GAGrC,MAAO,8LAIuDG,sIACAA,oIACAD,8FACNA,gLAKjBE,kUAKoBK,2RAI6BF,8EAAyFC,qQAGzHF,wPAICP,6KAMbM,sEACcrB,6D,CA9D5B0B,CAAa,IAAKf,E,WAAaI,IAC3D9B,EAAkB0C,mBAAmB,YAAaV,GAClD/B,SACGC,cAAc,2BACdyC,iBAAiB,QAASC,c,EAE/B,MAAOC,GACPC,QAAQC,IAAIF,E,EAGhBG,GCxCC,MACA,MAAMC,EAAO,CACXC,YAAajD,SAASC,cAAc,oBACpCiD,aAAclD,SAASC,cAAc,QACrCkD,KAAMnD,SAASC,cAAc,gBAG/B+C,EAAKC,YAAYP,iBAAiB,SAGlC,WACEM,EAAKG,KAAKC,UAAUC,OAAO,aAC3BrD,SAASsD,KAAKF,UAAUC,OAAO,Y,IAJjCrD,SAAS0C,iBAAiB,SAO1B,SAA4Ba,GACrBP,EAAKG,KAAKK,SAASD,EAAME,SAAYT,EAAKC,YAAYO,SAASD,EAAME,UACxET,EAAKG,KAAKC,UAAUM,IAAI,aACxB1D,SAASsD,KAAKF,UAAUO,OAAO,a,GAGnC,EArBA","sources":["src/js/api-key.js","src/js/home-upcoming.js","src/js/mobile-menu.js"],"sourcesContent":["const KEY = 'f1a48bce74b470ddc6475541cec139b4';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_BASE_URL = `https://image.tmdb.org/t/p`;\nconst UPCOMING_URL = `${BASE_URL}/movie/upcoming`;\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst IMG_W400 = `/w400`;\n\nexport { KEY, BASE_URL, IMG_BASE_URL, IMG_W400, UPCOMING_URL, TREND_URL };\n","const KEY = 'f1a48bce74b470ddc6475541cec139b4';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMG_BASE_URL = `https://image.tmdb.org/t/p`;\nconst UPCOMING_URL = `${BASE_URL}/movie/upcoming`;\nconst IMG_W400 = `/w400`;\n\nconst upcomingContainer = document.querySelector('.upcoming__container');\n\nfunction fetchUpcomingMovies() {\n  return fetch(`${UPCOMING_URL}?api_key=${KEY}&language=en-US&page=1`).then(\n    movieData => {\n      if (!movieData.ok) {\n        throw new Error(movieData.status);\n      }\n      return movieData.json();\n    }\n  );\n}\n\n// add function onClickRemind\n\nasync function getFetchedMovies() {\n  try {\n    const data = await fetchUpcomingMovies();\n    const returnedResult = data.results;\n    //   console.log(data.results);\n    if (returnedResult.length >= 1) {\n      const randomMovie =\n        returnedResult[Math.floor(Math.random() * returnedResult.length)];\n      const genreNames = await getGenresById(randomMovie.genre_ids);\n      const createdMarkup = await renderMarkup({ ...randomMovie, genreNames });\n      upcomingContainer.insertAdjacentHTML('beforeend', createdMarkup);\n      document\n        .querySelector('.upcoming__remindme-btn')\n        .addEventListener('click', onClickRemind);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\ngetFetchedMovies();\n\nasync function renderMarkup({\n  id,\n  poster_path,\n  backdrop_path,\n  title,\n  overview,\n  popularity,\n  vote_average,\n  vote_count,\n  release_date,\n  genre_ids,\n}) {\n  const genreNames = await getGenresById(genre_ids);\n\n\n    return `\n    <div class=\"upcoming__card\">\n        <div class=\"upcoming__thumb\">\n            <picture class='upcoming__poster'>\n            <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 1200px)\" class='upcoming__poster-desktop'/>\n            <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 768px)\" class='upcoming__poster-tablet'/>\n            <source srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\" media=\"(min-width: 320px)\"/>\n            <img src=\"https://image.tmdb.org/t/p/original/${poster_path}\" alt=\"Movie Poster\" style='width: 805px'/>\n            </picture>\n        </div>\n    </div>\n    <div class=\"upcoming__info\">\n        <h2 class=\"upcoming__info-title\">${title}</h2>\n        <div class=\"upcoming__movie\">\n            <div class=\"upcoming__info-left\">\n                <div class=\"upcoming__info-release\">\n                    <p class=\"upcoming__text\"> <span class =\"upcoming__light-black\">Release date</span> </p>\n                    <div class=\"upcoming__info-release-date\">${release_date}</div>\n                </div>\n                <div class=\"upcoming__info-vote\">\n                    <p class=\"upcoming__text\"><span class =\"upcoming__light-black\">Vote/Votes</span></p>\n                     <div class=\"upcoming__info-votes\"><span class=\"upcoming__info-white\">${vote_average}</span> <span class=\"slash\"> / </span><span class=\"upcoming__info-white\"> ${vote_count}</span></div>                    </div>\n                <div class=\"upcoming__info-pop\">\n                    <p class=\"upcoming__text\"> <span class =\"upcoming__light-black\">Popularity</span> </p>\n                    <div class=\"upcoming__info-pop-range\">${popularity}</div>\n                </div>\n                <div class=\"upcoming__info-genre\">\n                    <p class=\"upcoming__text\"><span class =\"upcoming__light-black\">Genre</span></p>\n                    <div class=\"upcoming__info-genre-kind\">${genreNames}</div>\n                </div>\n            </div>\n        </div>\n        <h2 class=\"upcoming__info-about\">ABOUT</h2>\n\n        <p class=\"upcoming__info-description\">${overview}</p>\n        <button class=\"upcoming__remindme-btn\" data-movieid=${id}  type=\"button\">Add to Library</button>\n    </div>\n     `;\n}\n\n\n\nasync function getGenresById(genreIds) {\n  const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list`;\n  const response = await fetch(`${BASE_URL}?api_key=${KEY}&language=en-US`);\n  const data = await response.json();\n\n  const genreNames = genreIds.map(genreId => {\n    const genre = data.genres.find(genre => genre.id === genreId);\n    return genre.name;\n  });\n\n  return genreNames.join(', ');\n}\n","(() => {\n const refs = {\n   openMenuBtn: document.querySelector(\"[data-menu-open]\"),\n   closeMenuBtn: document.querySelector(\"body\"),\n   menu: document.querySelector(\"[data-menu]\"),\n };\n\n refs.openMenuBtn.addEventListener(\"click\", toggleMenu);\n document.addEventListener(\"click\", handleOutsideClick);\n\n function toggleMenu() {\n   refs.menu.classList.toggle(\"is-hidden\");\n   document.body.classList.toggle(\"no-scroll\");\n }\n\n function handleOutsideClick(event) {\n   if (!refs.menu.contains(event.target) && !refs.openMenuBtn.contains(event.target)) {\n     refs.menu.classList.add(\"is-hidden\");\n     document.body.classList.remove(\"no-scroll\");\n   }\n }\n})();\n\n"],"names":["$b3138b5d1f099e14$var$upcomingContainer","document","querySelector","async","$b3138b5d1f099e14$var$getGenresById","genreIds","response","fetch","data","json","map","genreId","genres","find","genre","id","name","join","returnedResult","then","movieData","ok","Error","status","results","length","randomMovie","Math","floor","random","genreNames","genre_ids","createdMarkup","poster_path","backdrop_path","title","overview","popularity","vote_average","vote_count","release_date","$b3138b5d1f099e14$var$renderMarkup","insertAdjacentHTML","addEventListener","onClickRemind","error","console","log","$b3138b5d1f099e14$var$getFetchedMovies","refs","openMenuBtn","closeMenuBtn","menu","classList","toggle","body","event","contains","target","add","remove"],"version":3,"file":"librare.e3144550.js.map"}